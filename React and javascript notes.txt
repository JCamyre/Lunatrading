import Grid from '@material-ui/core/Grid';
// or
import { Grid } from '@material-ui/core';

"In my own application, there are many cases where Material-UI's Grid component easily provides the desired layout and we go ahead and use it, and there are other cases where Grid would just get in the way and we use flexbox CSS directly (at the moment, our app still supports IE 11 so we aren't ever using CSS Grid, though I look forward to the point in the future when we change our supported browsers so that we can use CSS Grid)."


"What is export default?"
If a module defines a default export:
// foo.js
export default function() { console.log("hello!") }
then you can import that default export by omitting the curly braces:

import foo from "foo";
foo(); // hello!

What the useEffect(() => {}, []) actually means (specifically the brackets at the end)
This requirement is common enough that it is built into the useEffect Hook API. You can tell React to skip applying an effect if certain values haven’t changed between re-renders. To do so, pass an array as an optional second argument to useEffect:

useEffect(() => {
  document.title = `You clicked ${count} times`;
}, [count]); // Only re-run the effect if count changes
In the example above, we pass [count] as the second argument. What does this mean? If the count is 5, and then our component re-renders with count still equal to 5, React will compare [5] from the previous render and [5] from the next render. Because all items in the array are the same (5 === 5), React would skip the effect. That’s our optimization.

When we render with count updated to 6, React will compare the items in the [5] array from the previous render to items in the [6] array from the next render. This time, React will re-apply the effect because 5 !== 6. If there are multiple items in the array, React will re-run the effect even if just one of them is different.
Summary: Compare the variable in the brackets to the next render in the useEffect, if they are equal don't rerender. 

Should I learn typescript

json.stringify() to store json as a variable in javascript/typescript

useEffect = on page load

can just useEffect(, []) empty array for "on page load", only loads once when the page is done loading.
When using axios.get(), have to use return once for axios.get().then(() => {}), and return again inside the .then() for the thing you want to return. 

Using arrow functions more

Nested list, [['joseph camyre', 'profilepic.com'], ['joe mama', 'pictures.org']]
pantomine
I could make api call in a for loop to get multiple things of data
"executed", code block
